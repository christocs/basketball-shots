{"version":3,"sources":["QuarterView.tsx","TotalView.tsx","TeamView.tsx","GameView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QuarterView","calcRunningTotal","shots","props","quarter","contests","adjustShots","value","newShots","setQuarter","index","adjustContests","newContests","Card","style","width","Content","Header","this","Description","display","Label","size","htmlFor","Input","id","readOnly","type","Button","Group","icon","color","onClick","disabled","label","React","Component","TotalView","Grid","Row","TeamView","onTeamNameChange","e","data","setTeam","name","undefined","quarters","team","calcTotalShots","total","forEach","calcTotalContests","window","innerWidth","placeholder","onChange","map","key","GameView","teams","game","setGame","Fragment","Column","App","createNewGame","newGames","state","games","unshift","create_datetime","Date","setState","current_game_index","saveData","storedGamesString","JSON","stringify","localStorage","setItem","deleteCurrentGame","confirm","splice","console","log","getItem","storedGames","parse","getMatchText","date","getDay","getMonth","getFullYear","dropdownOptions","text","Dropdown","selection","fluid","options","Number","length","labelPosition","primary","Icon","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7531c5fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, Card, Input, Label} from \"semantic-ui-react\";\r\nimport {Quarter} from \"./App\";\r\n\r\ninterface Props {\r\n    index: number\r\n    quarter: Quarter\r\n    setQuarter: (data: Partial<Quarter>, quarterIndex: number) => void\r\n}\r\n\r\nexport class QuarterView extends React.Component<Props> {\r\n    calcRunningTotal = (): number => {\r\n        const shots = this.props.quarter.shots;\r\n        const contests = this.props.quarter.contests;\r\n        // please don't divide by 0\r\n        // return (shots - (contests / (shots > 0 ? shots : 1)) * 100);\r\n        return (shots - contests) / (shots > 0 ? shots : 1) * 100;\r\n    }\r\n\r\n    adjustShots = (value: number) => {\r\n        const newShots = this.props.quarter.shots + value;\r\n        if ((newShots) >= 0) {\r\n            this.props.setQuarter(\r\n                {\r\n                    shots: newShots,\r\n                },\r\n                this.props.index,\r\n            );\r\n        }\r\n    }\r\n\r\n    adjustContests = (value: number) => {\r\n        const newContests = this.props.quarter.contests + value;\r\n        if ((newContests) >= 0) {\r\n            this.props.setQuarter(\r\n                {\r\n                    contests: newContests,\r\n                },\r\n                this.props.index,\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{width: \"100%\"}}>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        Quarter {this.props.index + 1}\r\n                    </Card.Header>\r\n                    <Card.Description style={{display: \"grid\"}}>\r\n                        <div style={{display: \"inline-flex\"}}>\r\n                            <div>\r\n                                <Label size=\"big\" htmlFor=\"shots\">\r\n                                    Shots\r\n                                </Label>\r\n                                <Input id=\"shots\" value={this.props.quarter.shots} readOnly type=\"number\" style={{width: \"4rem\"}}/>\r\n                            </div>\r\n                            <div>\r\n                                <Button.Group>\r\n                                    <Button icon=\"chevron down\" color=\"yellow\" onClick={() => this.adjustShots(-1)}\r\n                                            disabled={this.props.quarter.shots <= 0}/>\r\n                                    <Button icon=\"chevron up\" color=\"green\" onClick={() => this.adjustShots(1)}/>\r\n                                </Button.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{display: \"inline-flex\"}}>\r\n                            <div>\r\n                                <Label size=\"big\" htmlFor=\"contests\">\r\n                                    Contests\r\n                                </Label>\r\n                                <Input id=\"contests\" value={this.props.quarter.contests} readOnly type=\"number\" style={{width: \"4rem\"}}/>\r\n                            </div>\r\n                            <div>\r\n                                <Button.Group>\r\n                                    <Button icon=\"chevron down\" color=\"yellow\" onClick={() => this.adjustContests(-1)}\r\n                                            disabled={this.props.quarter.contests <= 0}/>\r\n                                    <Button icon=\"chevron up\" color=\"green\" onClick={() => this.adjustContests(1)}/>\r\n                                </Button.Group>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{display: \"inline-flex\"}}>\r\n                            <Input label=\"Running Total\" value={this.calcRunningTotal()} readOnly style={{width: \"5rem\"}}/>\r\n                        </div>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuarterView;\r\n","import React from 'react';\r\nimport {Card, Grid, Input} from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    shots: number\r\n    contests: number\r\n}\r\n\r\nexport class TotalView extends React.Component<Props> {\r\n    calcRunningTotal = (): number => {\r\n        const shots = this.props.shots;\r\n        const contests = this.props.contests;\r\n        // please don't divide by 0\r\n        // return (shots - (contests / (shots > 0 ? shots : 1)) * 100);\r\n        return (shots - contests) / (shots > 0 ? shots : 1) * 100;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{width: \"100%\"}}>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        Totals\r\n                    </Card.Header>\r\n                    <Card.Description>\r\n                        <Grid>\r\n                            <Grid.Row style={{display: \"inline\"}}>\r\n                                <Input label=\"Shots\" value={this.props.shots} readOnly/>\r\n                            </Grid.Row>\r\n                            <Grid.Row style={{display: \"inline\"}}>\r\n                                <Input label=\"Contests\" value={this.props.contests} readOnly/>\r\n                            </Grid.Row>\r\n                            <Grid.Row style={{display: \"inline\"}}>\r\n                                <Input label=\"Running Total\" value={this.calcRunningTotal()} readOnly/>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalView;\r\n","import React from 'react';\r\nimport {Grid, Input, InputOnChangeData} from \"semantic-ui-react\";\r\nimport {Quarter, Team} from \"./App\";\r\nimport QuarterView from \"./QuarterView\";\r\nimport TotalView from \"./TotalView\";\r\n\r\ninterface Props {\r\n    index: number\r\n    team: Team\r\n    setTeam: (data: Partial<Team>, index: number) => void\r\n}\r\n\r\nexport class TeamView extends React.Component<Props> {\r\n    onTeamNameChange = (e: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\r\n        this.props.setTeam({name: data.value !== \"\" ? data.value : undefined}, this.props.index);\r\n    }\r\n\r\n    setQuarter = (data: Partial<Quarter>, index: number) => {\r\n        const quarters = this.props.team.quarters;\r\n        quarters[index] = {...this.props.team.quarters[index], ...data};\r\n        this.props.setTeam({quarters}, this.props.index);\r\n    }\r\n\r\n    calcTotalShots = (): number => {\r\n        let total = 0;\r\n        this.props.team.quarters.forEach((quarter) => {\r\n            total += quarter.shots;\r\n        });\r\n        return total;\r\n    }\r\n\r\n    calcTotalContests = (): number => {\r\n        let total = 0;\r\n        this.props.team.quarters.forEach((quarter) => {\r\n            total += quarter.contests;\r\n        });\r\n        return total;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid style={{width: `${window.innerWidth/2}px`}}>\r\n                <Grid.Row>\r\n                    <Input label=\"Team\" placeholder=\"team name\" value={this.props.team.name}\r\n                           onChange={this.onTeamNameChange}/>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    {this.props.team.quarters.map((quarter, index) => <QuarterView quarter={quarter}\r\n                                                                                   index={index}\r\n                                                                                   setQuarter={this.setQuarter} key={index}/>)}\r\n                    <TotalView shots={this.calcTotalShots()} contests={this.calcTotalContests()}/>\r\n                </Grid.Row>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeamView;\r\n","import React from 'react';\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport {Game, Team} from \"./App\";\r\nimport TeamView from \"./TeamView\";\r\n\r\ninterface Props {\r\n    game: Game\r\n    setGame: (data: Partial<Game>) => void\r\n}\r\n\r\nexport class GameView extends React.Component<Props> {\r\n\r\n    setTeam = (data: Partial<Team>, index: number) => {\r\n        const teams = this.props.game.teams;\r\n        teams[index] = {...this.props.game.teams[index], ...data};\r\n        this.props.setGame({teams});\r\n    }\r\n\r\n    render() {\r\n        // const getDate = (): string => {\r\n        //     const date = this.props.game.create_datetime;\r\n        //     return `${date.getHours()}:${date.getMinutes()} ${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`;\r\n        // }\r\n        //\r\n        // const getMatchText = (): string => {\r\n        //     const game = this.props.game;\r\n        //     return `${!!game.teams[0].name ? game.teams[0].name : \"[team name]\"} v ${!!game.teams[1].name ? game.teams[1].name : \"[team name]\"}`;\r\n        // }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {/*<Header as=\"h1\">{getMatchText()}</Header>*/}\r\n                {/*<Header as=\"h2\">{getDate()}</Header>*/}\r\n\r\n                {/*todo: remove hacked widths*/}\r\n                <Grid style={{width: `${window.innerWidth}px`}}>\r\n                    {/*<Grid.Column style={{width: `30vw`}}>*/}\r\n                        <Grid.Column width={6}>\r\n                        <TeamView team={this.props.game.teams[0]} index={0} setTeam={this.setTeam}/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        <TeamView team={this.props.game.teams[1]} index={1} setTeam={this.setTeam}/>\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameView;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {Button, Dropdown, DropdownItemProps, Grid, Icon} from \"semantic-ui-react\";\r\nimport GameView from \"./GameView\";\r\nimport {DropdownProps} from \"semantic-ui-react/dist/commonjs/modules/Dropdown/Dropdown\";\r\n\r\ninterface State {\r\n    games: Game[]\r\n    current_game_index?: number\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport interface Game {\r\n    teams: [Team, Team]\r\n    create_datetime: Date\r\n}\r\n\r\nexport interface Team {\r\n    name?: string\r\n    quarters: [Quarter, Quarter, Quarter, Quarter]\r\n}\r\n\r\nexport interface Quarter {\r\n    shots: number\r\n    contests: number\r\n}\r\n\r\nexport class App extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = {\r\n            games: [],\r\n            current_game_index: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const storedGamesString = localStorage.getItem('games');\r\n        console.log(\"LOAD SAVED DATA\", storedGamesString)\r\n        if (storedGamesString) {\r\n            const storedGames: Game[] = JSON.parse(storedGamesString);\r\n            // set Date objects, which are serialised as strings\r\n            storedGames.forEach((game, index) => {\r\n                game.create_datetime = new Date(game.create_datetime);\r\n            })\r\n            console.log(\"STORED GAMES JSON\", storedGames);\r\n            // assume parsed json is the right type\r\n            this.setState({games: storedGames});\r\n        }\r\n    }\r\n\r\n    createNewGame = () => {\r\n        const newGames = this.state.games;\r\n        newGames.unshift({\r\n            create_datetime: new Date(),\r\n            teams: [\r\n                {\r\n                    name: \"\",\r\n                    quarters: [\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                    ]\r\n                },\r\n                {\r\n                    name: \"\",\r\n                    quarters: [\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                        {\r\n                            shots: 0,\r\n                            contests: 0,\r\n                        },\r\n                    ]\r\n                },\r\n            ]\r\n        });\r\n\r\n        this.setState({\r\n            games: newGames,\r\n            current_game_index: 0,\r\n        }, () => this.saveData());\r\n    }\r\n\r\n    saveData = () => {\r\n        const storedGamesString = JSON.stringify(this.state.games);\r\n        localStorage.setItem('games', storedGamesString);\r\n    }\r\n\r\n    deleteCurrentGame = () => {\r\n        if (this.state.current_game_index !== undefined) {\r\n            if (window.confirm(\"Are you sure you wan to delete the current game?\")) {\r\n                const games = this.state.games;\r\n                games.splice(this.state.current_game_index, 1);\r\n                console.log('games delete', games)\r\n                this.setState({\r\n                    games,\r\n                    current_game_index: undefined,\r\n                }, () => this.saveData());\r\n            }\r\n        }\r\n    }\r\n\r\n    setGame = (data: Partial<Game>) => {\r\n        const index = this.state.current_game_index;\r\n        if (index !== undefined) {\r\n            const games = this.state.games;\r\n            games[index] = {...this.state.games[index], ...data};\r\n            this.setState({games}, () => this.saveData())\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const getDate = (date: Date): string => {\r\n            return `${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`;\r\n        }\r\n\r\n        const getMatchText = (game: Game): string => {\r\n            return `${!!game.teams[0].name ? game.teams[0].name : \"[team name]\"} v ${!!game.teams[1].name ? game.teams[1].name : \"[team name]\"} - ${getDate(game.create_datetime)}`;\r\n        }\r\n\r\n        const dropdownOptions: DropdownItemProps[] =\r\n            this.state.games.map((game, index) => {\r\n                    return {\r\n                        key: index,\r\n                        text: getMatchText(game),\r\n                        value: index,\r\n                    }\r\n                }\r\n            );\r\n\r\n        const handleDropdownChange = (e: React.SyntheticEvent<HTMLElement>, data: DropdownProps) => {\r\n            this.setState({current_game_index: data.value !== \"\" ? Number(data.value) : undefined})\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {/*todo: remove hacked width*/}\r\n                <Grid style={{width: `${window.innerWidth}px`}}>\r\n                    <Grid.Row>\r\n                        <div style={{display: \"inline-flex\"}}>\r\n                            <Dropdown\r\n                                placeholder=\"Select game...\"\r\n                                selection\r\n                                fluid\r\n                                options={dropdownOptions}\r\n                                onChange={handleDropdownChange}\r\n                                value={this.state.current_game_index !== undefined ? this.state.current_game_index : \"\"}\r\n                                disabled={this.state.games.length < 1}\r\n                            />\r\n                            <Button icon labelPosition=\"left\" onClick={this.createNewGame} primary={true}>\r\n                                <Icon name=\"plus\"/>\r\n                                New Game\r\n                            </Button>\r\n                            <Button icon onClick={this.deleteCurrentGame} disabled={this.state.current_game_index === undefined}>\r\n                                <Icon name=\"trash\"/>\r\n                            </Button>\r\n                        </div>\r\n                    </Grid.Row>\r\n                    {this.state.current_game_index !== undefined &&\r\n                    <Grid.Row>\r\n                        <GameView game={this.state.games[this.state.current_game_index]} setGame={this.setGame}/>\r\n                    </Grid.Row>\r\n                    }\r\n                </Grid>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}